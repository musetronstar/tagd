#!/usr/bin/expect

# exp_internal 1   ;# diagnostics

set spawn_tagsh "spawn ../bin/tagsh --db -"
set bootstrap ../bootstrap.tagl

set PROMPT "tagd> "
set MAX_ERRORS 3
set ERRORS 0
set NL "\r\n"   ;# WTF
set TIMEOUT 1

set timeout $TIMEOUT
set log_user 1  ;# log output to stdout, 0 disables

# sends a tagls string and expects args
# n = <test_name>, s = <tagl_string>, e = <expect_args>
proc test {n s e} {
	upvar 1 ERRORS errors
	upvar 1 MAX_ERRORS max_errors
	upvar 1 NL nl
	upvar 1 PROMPT prompt

	set match 0

	send "$s$nl"
	expect "$s$nl"	;# eat the echoed statement

	expect {
		-regexp $e  { 
				puts "\n##########   $n passed   ##########\n"
				set match 1
			}
	}

	# eats output up to the next prompt
	expect $prompt

	if {$match} { return }

	puts "\n!!!!!!!!!!   $n failed   !!!!!!!!!!\n"
	incr errors

	if {$errors >= $max_errors} {
		puts "$errors errors. Exiting..."
		exit $errors
	}
}

# like test, but fails if the expect args are true
# use sparingly because it has to timeout for success
proc test_neg {n s e} {
	upvar 1 ERRORS errors
	upvar 1 MAX_ERRORS max_errors
	upvar 1 NL nl
	upvar 1 PROMPT prompt

	set match 0	

	send "$s$nl"
	expect "$s$nl"	;# eat the echoed statement

	expect {
		-regexp $e  { 
				puts "\n**********   $n failed   **********\n"
				incr errors

				if {$errors >= $max_errors} {
					puts "$errors errors. Exiting..."
					exit $errors
				}

				set match 1	
			}
		default		;# timeout,eof ok
	}

	# eats output up to the next prompt
	expect $prompt

	if {$match} { return }  ;# failed

	puts "\n##########   $n passed   ##########\n"
}


eval $spawn_tagsh
expect "use .show to list commands$NL"
expect $PROMPT

test "get_dog_not_exists" \
	 "<< dog;" \
	 "TS_NOT_FOUND"

# passes when output does not contain TAGL_ERR or "no such file"
test_neg "bootstrap" \
	     ".load $bootstrap" \
	     "(TAGL_ERR)|(no such file)"

test "get_dog" \
	 "<< dog;" \
	 "dog _is_a mammal"

test "put_duplicate" \
     ">> cat _is_a mammal;" \
	 "TS_DUPLICATE"

test "put_ignore_duplicate" \
     "%% _ignore_duplicates 1;\n>> cat _is_a mammal;" \
	 "TAGD_OK"

test "put_unignore_duplicate" \
     "%% _ignore_duplicates 0;\n>> cat _is_a mammal;" \
	 "TS_DUPLICATE"

test "get_doggy_not_exists" \
	 "<< doggy;" \
	 "TS_NOT_FOUND"

test_neg "set_context_simple_english" \
         "%% _context simple_english" \
	     "TAGL_ERR"

test "refer_doggy" \
	 ">> doggy refers_to dog context simple_english;" \
	 "TAGD_OK"

test "get_doggy" \
	 "<< doggy;" \
	 "doggy is_a mammal(.*)refers_to dog"

test "delete_refers_tag_err" \
     "!! doggy;" \
	 "TS_MISUSE"

test "delete_refer_doggy" \
	 "!! doggy refers_to dog context simple_english;" \
	 "TAGD_OK"

test "get_doggy_deleted_not_exists" \
	 "<< doggy;" \
	 "TS_NOT_FOUND"

test "delete_bat" \
     "!! bat;" \
	 "TAGD_OK"

test "query_mammal_children" \
	 "?? what is_a mammal;" \
	 "dog, cat, whale"

test "query_mammal_children_empty" \
	 "?? what is_a dog;" \
	 "TS_NOT_FOUND"

test "query_parent_relator" \
	 "?? what is_a animal
	  has blood = warm, tail
	  can bark" \
	 "dog"

test "refer_japanese_dog" \
     ">> イヌ refers_to dog _context japanese" \
	 "TAGD_OK"

test "get_japanese_dog_ambiguous" \
	 "<< イヌ;" \
	 "TS_AMBIGUOUS"

test "set_context_not_found" \
     "%% _context caca" \
	 "TS_NOT_FOUND"

test_neg "set_context_animal" \
         "%% _context animal" \
	     "TAGL_ERR"

test "get_japanese_dog_ambiguious" \
	 "<< イヌ;" \
	 "TS_AMBIGUOUS"

test_neg "set_context_simple_english_japanese" \
         "%% _context simple_english, japanese" \
	     "TAGL_ERR"

test "get_japanese_dog" \
	 "<< イヌ;" \
	 "イヌ is_a mammal(.*)refers_to dog"

test_neg "set_context_simple_english2" \
         "%% _context simple_english" \
	     "TAGL_ERR"

test "put_url_dog" \
     ">> https://en.wikipedia.org/wiki/Dog about dog has title = \"Dog - Wikipedia, the free encyclopedia\"" \
	 "TAGD_OK"

test "get_url_dog" \
     "<< https://en.wikipedia.org/wiki/Dog ;" \
	 "https://en.wikipedia.org/wiki/Dog(.*)about dog"

test "put_url_dog2" \
    ">> http://animal.discovery.com/breed-selector/dog-breeds.html about dog" \
	"TAGD_OK"

test "put_url_cat" \
    ">> https://en.wikipedia.org/wiki/Cat about cat" \
	"TAGD_OK"

test "query_tag" \
	 "?? dog;" \
	 "TAGL_ERR"

test "search" \
	 "?? \"dog\";" \
"https://en.wikipedia.org/wiki/Dog, http://animal.discovery.com/breed-selector/dog-breeds.html, dog"

test "query_url_dog" \
     "?? what is_a _url about dog" \
"https://en.wikipedia.org/wiki/Dog, http://animal.discovery.com/breed-selector/dog-breeds.html"

test "query_url_animal" \
     "?? what is_a _url * animal" \
"https://en.wikipedia.org/wiki/Dog, http://animal.discovery.com/breed-selector/dog-breeds.html, https://en.wikipedia.org/wiki/Cat"

test "query_url_animal_wikipedia" \
"?? what is_a _url * animal
_has _private = wikipedia, _public = org" \
"https://en.wikipedia.org/wiki/Dog, https://en.wikipedia.org/wiki/Cat"

send ".exit$NL"
expect eof
wait

if {$ERRORS} {
	puts "$ERRORS errors."
} else {
	puts "All tests passed."
} 

exit $ERRORS
