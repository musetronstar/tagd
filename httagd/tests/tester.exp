#!/usr/bin/expect

# exp_internal 1   ;# diagnostics

set spawn_httagd "spawn ../bin/httagd --file ../../tagsh/bootstrap.tagl --www-dir ./www-tester"

set MAX_ERRORS 3
set ERRORS 0
set NL "\r\n"
set TIMEOUT 1

set timeout $TIMEOUT
set log_user 1  ;# log output to stdout, 0 disables

# launches curl using args and expects
# n = <test_name>, m = method, u = url, d = <body_data>, e = <expect_args>
proc test {n m u d e} {
	upvar 1 ERRORS errors
	upvar 1 MAX_ERRORS max_errors
	upvar 1 NL nl

	set match 0

	if { [string length $d] == 0 } {
		spawn curl -D - -X$m "http://localhost:2112$u"
	} else {
		spawn curl -D - -X$m "http://localhost:2112$u" --data "$d"
	}

	expect {
		-regexp $e  {
				puts "\n##########   $n passed   ##########\n"
				set match 1
			}
	}

	if {$match} { return }

	puts "\n!!!!!!!!!!   $n failed   !!!!!!!!!!\n"
	incr errors

	if {$errors >= $max_errors} {
		puts "$errors errors. Exiting..."
		exit $errors
	}
}

# launches curl using args and expects
# n = <test_name>, m = method, u = url, f = filename, e = <expect_args>
proc test_file {n m u f e} {
	upvar 1 ERRORS errors
	upvar 1 MAX_ERRORS max_errors
	upvar 1 NL nl

	set match 0

	if { [string length $f] == 0 } {
		spawn curl -D - -X$m "http://localhost:2112$u"
	} else {
		spawn curl -D - -X$m "http://localhost:2112$u" --data-binary "@$f"
	}

	expect {
		-regexp $e  {
				puts "\n##########   $n passed   ##########\n"
				set match 1
			}
	}

	if {$match} { return }

	puts "\n**********   $n failed   **********\n"
	incr errors

	if {$errors >= $max_errors} {
		puts "$errors errors. Exiting..."
		exit $errors
	}
}

eval $spawn_httagd

# TODO there must be a better way to wait for the server to start up
sleep 1

test "get_dog" \
	 "GET" "/dog" "" \
	 "dog _is_a mammal"

test "put_dolphin" \
	 "PUT" "/dolphin" ">> dolphin _is_a whale" \
	 "200 OK"

test "get_dolphin" \
	 "GET" "/dolphin" "" \
	 "dolphin _is_a whale"

test "get_children" \
	 "GET" "/mammal/" "" \
	 "dog, cat, whale, bat"

test "get_children_empty" \
	 "GET" "/dog/" "" \
	 "404 Not Found"

test "put_empty_tagdurl" \
	 "PUT" "" "narwhal _is_a whale" \
	 "400 Bad Request"

test "put_slash_empty_tagdurl" \
	 "PUT" "/" "narwhal _is_a whale" \
	 "400 Bad Request"

test "put_illegal_search" \
     "PUT" "/pigeon?q=oops" "_is_a bird" \
	 "400 Bad Request"

test "get_doggy_not_exists" \
	 "GET" "/doggy" "" \
	 "404 Not Found"

test "put_refer_doggy_no_context" \
	 "POST" "/doggy" "_refers_to dog" \
	 "400 Bad Request"

test "put_refer_doggy" \
	 "POST" "/doggy" "_refers_to dog _context simple_english" \
	 "200 OK"

test "get_doggy_no_context" \
	 "GET" "/doggy" "" \
	 "400 Bad Request"

test "get_doggy" \
	 "GET" "/doggy?c=simple_english" "" \
	 "doggy is_a mammal(.*)_refers_to dog"

test "search" \
	 "GET" "?q=can+bark" "" \
	 "dog"

test "tag_search" \
	 "GET" "/animal?q=warm+blood" "" \
	 "400 Bad Request"

# TODO httagd should produce this query (which works in tagsh):
# ?? _interrogator _sub animal _has _terms = "warm blood";
test "tag_sub_search" \
	 "GET" "/animal/?q=warm+blood" "" \
	 "mammal"

test "illegal_get_tag_search" \
	 "GET" "?q=can+bark" "" \
	 "dog"


test "delete_refers_no_context" \
     "DELETE" "/doggy" "" \
	 "404 Not Found"

test "delete_refers_to_doggy_no_context" \
	 "DELETE" "/doggy" "_refers_to dog" \
	 "400 Bad Request"

test "delete_refers_to_doggy" \
	 "DELETE" "/doggy" "_refers_to dog _context simple_english" \
	 "200 OK"

test "get_doggy_deleted_not_exists" \
	 "GET" "/doggy" "" \
	 "404 Not Found"

test "delete_illegal_search" \
     "DELETE" "/bat?q=oops" "" \
	 "400 Bad Request"

test "delete_bat" \
     "DELETE" "/bat" "" \
	 "200 OK"

test "query_mammal_sub" \
	 "GET" "/mammal/" "" \
	 "dog, cat, whale"

test "query_parent_relator" \
     "GET" "/animal/blood=warm,tail,bark" "" \
	 "dog"

test "put_url" \
	 "PUT" "/hd:org!wikipedia!en!/wiki/Dog!!!!!!https" ">> https://en.wikipedia.org/wiki/Dog about dog _has title = \"Dog - Wikipedia, the free encyclopedia\"" \
	 "200 OK"

test "get_wiki_dog_url" \
	 "GET" "/hd:org!wikipedia!en!/wiki/Dog!!!!!!https" "" \
	 "https://en.wikipedia.org/wiki/Dog(.*)about dog"

# this works, but it shouldn't
# TODO encode utf8 urls
test "refer_japanese_dog" \
     "POST" "/イヌ" "_refers_to dog _context japanese" \
	 "200 OK"

test "get_japanese_dog_ambiguous" \
	 "GET" "/イヌ" "" \
	 "TS_AMBIGUOUS"

# contextual get
test "get_japanese_dog" \
	 "GET" "/イヌ?c=japanese" "" \
	 "イヌ _is_a mammal(.*)_refers_to dog"

test "get_txt_file" \
	 "GET" "/_file/test.txt" "" \
	 "FILE_TEXT"

# TODO
#test "refer_file" \
#     "POST" "/test" "_refers_to /_file/test.txt _context _file" \
#	 "200 OK"

#test "get_refered_txt_file" \
#	 "GET" "/test?c=_file" "" \
#	 "FILE_TEXT"

close
wait

if {$ERRORS} {
	puts "$ERRORS errors."
} else {
	puts "All tests passed."
}

exit $ERRORS
